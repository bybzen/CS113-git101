1. Pointers and Addresses
    ภาษา C เป็นภาษาที่เข้าถึงและจัดการหน่วยความจำได้ (memory) ได้โดยตรง ด้วยการใช้ pointer
pointer คือ ตัวแปรที่เก็บค่าตำแหน่งหรือ address ในหน่ยความจำ

**************************************************************************************

2. Pointers Operators
operators ที่ใช้เพิ่มเติมในการใช้งาน pointer มี 2 ตัวคือ
    
    1. * เรียกว่า dereferencing operator หรือ indirection operator คือ ใช้ * เป็นการอ้างค่าตำแหน่ง
ของ operand ที่ถูกกล่าวถึง
เช่น int *x; 

    2. & เรียกว่า address operator คือ ใช้ & หาค่าตำแหน่งใน memory ของ operand
เช่น int *x;
    int c = 5;
    x = &c;
    หมายความว่า ให้ค่าของตัวแปร x มีค่าเท่ากับ address ของตัวแปร c

**************************************************************************************

3. Pointers กับ Arrays
เช่น int x[5];
    x[n] อ้างอิงถึงข้อมูลตัวที่ n ใน array x
    ชื่อของ array จะบอกถึงค่า base address ของ array หมายถึง x จะให้ค่า address ที่ใช้เก็บข้อมูลตัวแรกใน array
    จะได้ว่า x มีค่าเท่ากับ &x[0]

**************************************************************************************

4.การจำลองการเรียกฟังก์ชันแบบ Call by Reference
    เราสามารถใช้ pointer ช่วยในการจำลองการเรียกใช้ฟังก์ชันแบบ pass by reference ได้
เช่น #include <stdio.h>
    
    void swap(int *x, int *y)
    { 
        int temp;
        temp = *x;
        *x = *y;
        *y = temp;
    }
    int main()
    { 
        int x = 3, y = 4;
        printf("before x = %d, y = %d\n", x, y);
        swap(&x, &y);
        printf("after x = %d, y = %d\n", x, y);
    }

**************************************************************************************

5.นิพจน์ใน pointer และการใช้ตัวดำเนินการทางคณิตศาสตร์กับ pointer (Expressions and Pointer Arithmetic)
เช่น int *p;
    int x[] = {0, 1, 2, 3};
    p = x;
    p = p+1;
หมายความว่า ให้เพิ่มค่า p ขึ้นเป็น 1 เท่าของขนาดประเภทข้อมูล(p เป็นข้อมูลชนิด integer มีขนาด 4 byte
เลยทำให้ p เพิ่มขึ้นไปอีก 4 หน่วย)

**************************************************************************************

6.การจองหน่วยความจำ (Dynamic Memory Allocation)
เราสามารถใช้ฟังก์ชัน malloc() เพื่อจองพื้นที่และใช้ฟังก์ชัน free() เพื่อคืนพื้นที่ในหน่วยความจำ
การใช้ malloc()
    เช่น int *data;
    data = (int *)malloc(1000 * sizeof(int));
     malloc จะจองพื้นที่ตามขนาด byte ของประเภทของข้อมูล ค่าของ malloc ตอนที่ส่งกลับมาจะเป็นตำแหน่งในหน่วยความจำ (base address)
ที่ระบบปฏิบัติการจองพื้นที่ไว้ให้ และถ้าในหน่วยความจำในระบบมีพื้นที่ให้จองไม่พอ malloc() จะส่งค่า NULL กลับมายังผู้เรียก

การใช้ free()
    เช่น free(data); พารามิเตอร์ของ free() จะเป็นตำแหน่งในหน่วยความจำ (base address) ที่เราต้องการจะคืนพื้นที่ให้กับระบบ

**************************************************************************************

7.Segmentation fault(core dumped)
    คือ การที่เราพยายามเข้าถึงหน่วยความจำที่เราไม่ได้จองเอาไว้ โดยในระบบปฏิบัติการ UNIX จะแสดงข้อความว่า Segmentation fault (core dumped)
ออกมาบนหน้าจอ

**************************************************************************************